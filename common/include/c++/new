#ifndef __NEW
#define __NEW
#ifndef _GCC_STDINT_H
#include "stdint.h"
#endif
#include "stddef.h"
namespace std
{
    using size_t = ::size_t;
    enum class align_val_t : size_t {};
}
[[nodiscard]] void* operator new(std::size_t count);
[[nodiscard]] void* operator new[](std::size_t count);
[[nodiscard]] void* operator new(std::size_t count, std::align_val_t al);
[[nodiscard]] void* operator new[](std::size_t count, std::align_val_t al);
void operator delete(void* ptr) noexcept;
void operator delete[](void* ptr) noexcept;
void operator delete(void* ptr, std::align_val_t al);
void operator delete[](void* ptr, std::align_val_t al);
#define INLINE __attribute__((__always_inline__))
[[nodiscard]] constexpr INLINE void* operator new(std::size_t, void* ptr) noexcept { return ptr; }
[[nodiscard]] constexpr INLINE void* operator new[](std::size_t, void* ptr) noexcept { return ptr; }
#endif