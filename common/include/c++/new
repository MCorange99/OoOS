#ifndef __NEW
#define __NEW
#include "bits/stl_allocator.h"
[[nodiscard]] void* operator new(std::size_t count) __visible;
[[nodiscard]] void* operator new[](std::size_t count) __visible;
[[nodiscard]] void* operator new(std::size_t count, std::align_val_t al) __visible;
[[nodiscard]] void* operator new[](std::size_t count, std::align_val_t al) __visible;
[[nodiscard]] __force_inline __visible constexpr void* operator new(std::size_t, void* ptr) noexcept { return ptr; }
[[nodiscard]] __force_inline __visible constexpr void* operator new[](std::size_t, void* ptr) noexcept { return ptr; }
void operator delete(void* ptr) noexcept __visible;
void operator delete[](void* ptr) noexcept __visible;
void operator delete(void* ptr, std::align_val_t al) __visible;
void operator delete[](void* ptr, std::align_val_t al) __visible;
void operator delete(void* ptr, std::size_t, std::align_val_t al) __visible;
void operator delete[](void* ptr, std::size_t, std::align_val_t al) __visible;
__force_inline __visible constexpr void operator delete  (void*, void*) {}
__force_inline __visible constexpr void operator delete[](void*, void*) {}
#endif